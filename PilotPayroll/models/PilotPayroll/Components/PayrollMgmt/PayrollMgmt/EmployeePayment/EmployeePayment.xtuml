-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("21b3f00e-5083-45c8-92be-24d44a0e0927",
	'EmployeePayment',
	5,
	'EmployeePayment',
	'Aggregate payment information for an employee for a pay period.',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("8cac4492-498a-4aef-872c-1b3813b2dd4e",
	"21b3f00e-5083-45c8-92be-24d44a0e0927",
	'EvaluatePaymentElements',
	'(Re)evaluate payments by traversing the set of structure elements and applying modifiers as appropriate.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// (Re)evaluate the current payroll elements for this employee payment instance.
// For each element, (re)calculate its value - if it has not been edited in a review.
// (No value should be re-evaluated after it has been edited by a reviewer)
// Navigate to the element specification to understand how to evaluate the element.
// Non-dependent values are calculated first; they may be needed as the basis for modifier elements.
// Then, modifier-type elements (multipliers) evaluate based on their specified ''target''.
// All evaluations may involve pro-rating if their effective dates fall within the pay period.
// 
// Note: There is currently no support for editing values in a review; this evaluates once.

select many payElements related by self->EmployeePaymentElement[R15.''is composed of''];
select many editedElements related by payElements->Payroll[R31.''has been edited for'']
                                                 ->EmployeePaymentElement[R31.''has edited''];
elements = payElements - editedElements;  // these are all this payment elements that have not been edited

// Pass 1 - evaluate non-dependent elements that have not been edited by a reviewer.
for each element in elements
  select one structElement related by element->PaymentStructureElement[R13.''is a realization of''];
  select one targetSpec related by structElement->PaymentElementSpec[R12.''is typed by'']
                                                ->PaymentElementSpec[R30.''is a modifier for''];
  if ( empty targetSpec )	// this is not a modifier - proceed to evaluate
    element.Amount = structElement.Evaluate();
 	end if;
end for;

// Pass 2 - evaluate any modifier elements: e.g. amount = base pay (''target'') by bonus percentage (''modifier'')
for each element in  elements
  select one structElement related by element->PaymentStructureElement[R13.''is a realization of''];
  select one targetSpec related by structElement->PaymentElementSpec[R12.''is typed by'']
                                                ->PaymentElementSpec[R30.''is a modifier for''];
  if ( not empty targetSpec )	  // this element is a modifier - proceed to identify its ''target''
    for each targetElement in elements
      select one targetStructElement related by targetElement->PaymentStructureElement[R13.''is a realization of''];
      select one targetElementSpec related by targetStructElement->PaymentElementSpec[R12.''is typed by'']
       where ( selected.Label == targetSpec.Label );
  	  if ( not_empty targetElementSpec )	// this is the target element''s spec.; evaluate, using the target element amount.
        element.Amount = structElement.Modify( TargetValue:targetElement.Amount,
                                               TargetEffectiveDate:targetStructElement.EffectiveDate );
        break;
 	    end if;
 	  end for;
  end if;
end for;
',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0);
INSERT INTO O_TFR
	VALUES ("67668115-33d2-4f71-96f0-b8893def710d",
	"21b3f00e-5083-45c8-92be-24d44a0e0927",
	'CalculateTotalPayment',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Combine evaluated element values for total payment.
self .Amount = 0;
select many payElements related by self->EmployeePaymentElement[R15.''is composed of''];
for each payElement in payElements
  self.Amount = self.Amount + payElement.Amount;  
end for;
',
	1,
	'',
	"8cac4492-498a-4aef-872c-1b3813b2dd4e",
	0);
INSERT INTO O_NBATTR
	VALUES ("40e511b6-3e21-4c6d-8e9b-eda859847d12",
	"21b3f00e-5083-45c8-92be-24d44a0e0927");
INSERT INTO O_BATTR
	VALUES ("40e511b6-3e21-4c6d-8e9b-eda859847d12",
	"21b3f00e-5083-45c8-92be-24d44a0e0927");
INSERT INTO O_ATTR
	VALUES ("40e511b6-3e21-4c6d-8e9b-eda859847d12",
	"21b3f00e-5083-45c8-92be-24d44a0e0927",
	"00000000-0000-0000-0000-000000000000",
	'Amount',
	'Amount calculated for the pay period from all contribution and deduction elements.',
	'',
	'Amount',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"21b3f00e-5083-45c8-92be-24d44a0e0927");
INSERT INTO O_ID
	VALUES (1,
	"21b3f00e-5083-45c8-92be-24d44a0e0927");
INSERT INTO O_ID
	VALUES (2,
	"21b3f00e-5083-45c8-92be-24d44a0e0927");
INSERT INTO PE_PE
	VALUES ("21b3f00e-5083-45c8-92be-24d44a0e0927",
	1,
	"66af3a6e-b969-4d52-8331-503fed93597c",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("66af3a6e-b969-4d52-8331-503fed93597c",
	"00000000-0000-0000-0000-000000000000",
	"5713191d-1d3c-41cb-add1-1cce3729acf2",
	'PayrollMgmt',
	'This is an incomplete rendering of an ERP component representing basic payroll management.
For current demonstration purposes, only some basic functionality is implemented.

An employee''s total compensation may be composed of a number of payment types.
This is represented by a set of ''payment structure'' entities which carry a nominal value.
Some payment types represent multipliers which apply to other types - e.g. bonus as percentage of salary.

When payroll is generated for a pay period, a corresponding set of editable values is created.
These values may be viewed, held, approved; at present, there is no support for editing values.

Note:
There is no support for accepting changes to a department''s staff.
There is no support for modifying the structure of an employee''s compensation.
There are some placeholder actions where interaction with a Finance component would occur.
',
	0,
	'../PayrollMgmt.xtuml');
